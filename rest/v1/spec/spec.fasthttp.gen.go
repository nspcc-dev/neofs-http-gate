// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package spec

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/fasthttp/router"
	"github.com/valyala/fasthttp"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ContainerTokenVerb.
const (
	ContainerTokenVerbDELETE ContainerTokenVerb = "DELETE"

	ContainerTokenVerbPUT ContainerTokenVerb = "PUT"

	ContainerTokenVerbSETEACL ContainerTokenVerb = "SETEACL"
)

// Defines values for FilterHeaderType.
const (
	FilterHeaderTypeOBJECT FilterHeaderType = "OBJECT"

	FilterHeaderTypeREQUEST FilterHeaderType = "REQUEST"

	FilterHeaderTypeSERVICE FilterHeaderType = "SERVICE"
)

// Defines values for FilterMatchType.
const (
	FilterMatchTypeSTRINGEQUAL FilterMatchType = "STRING_EQUAL"

	FilterMatchTypeSTRINGNOTEQUAL FilterMatchType = "STRING_NOT_EQUAL"
)

// Defines values for RecordAction.
const (
	RecordActionALLOW RecordAction = "ALLOW"

	RecordActionDENY RecordAction = "DENY"
)

// Defines values for RecordOperation.
const (
	RecordOperationDELETE RecordOperation = "DELETE"

	RecordOperationGET RecordOperation = "GET"

	RecordOperationHEAD RecordOperation = "HEAD"

	RecordOperationPUT RecordOperation = "PUT"

	RecordOperationRANGE RecordOperation = "RANGE"

	RecordOperationRANGEHASH RecordOperation = "RANGEHASH"

	RecordOperationSEARCH RecordOperation = "SEARCH"
)

// Defines values for RuleVerb.
const (
	RuleVerbDELETE RuleVerb = "DELETE"

	RuleVerbPUT RuleVerb = "PUT"

	RuleVerbSETEACL RuleVerb = "SETEACL"
)

// Defines values for TargetRole.
const (
	TargetRoleOTHERS TargetRole = "OTHERS"

	TargetRoleSYSTEM TargetRole = "SYSTEM"

	TargetRoleUSER TargetRole = "USER"
)

// Bearer defines model for Bearer.
type Bearer struct {
	Container *[]Rule   `json:"container,omitempty"`
	Object    *[]Record `json:"object,omitempty"`
}

// ContainerInfo defines model for ContainerInfo.
type ContainerInfo struct {
	Attributes *[]struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"attributes,omitempty"`
	BasicAcl        *string `json:"basicAcl,omitempty"`
	ContainerId     *string `json:"containerId,omitempty"`
	OwnerId         *string `json:"ownerId,omitempty"`
	PlacementPolicy *string `json:"placementPolicy,omitempty"`
	Version         *string `json:"version,omitempty"`
}

// ContainerToken defines model for ContainerToken.
type ContainerToken struct {
	Token string             `json:"token"`
	Verb  ContainerTokenVerb `json:"verb"`
}

// ContainerTokenVerb defines model for ContainerToken.Verb.
type ContainerTokenVerb string

// ContainerTokenResponse defines model for ContainerTokenResponse.
type ContainerTokenResponse struct {
	Tokens *[]ContainerToken `json:"tokens,omitempty"`
}

// Filter defines model for Filter.
type Filter struct {
	HeaderType FilterHeaderType `json:"headerType"`
	Key        string           `json:"key"`
	MatchType  FilterMatchType  `json:"matchType"`
	Value      string           `json:"value"`
}

// FilterHeaderType defines model for Filter.HeaderType.
type FilterHeaderType string

// FilterMatchType defines model for Filter.MatchType.
type FilterMatchType string

// Record defines model for Record.
type Record struct {
	Action    RecordAction    `json:"action"`
	Filters   []Filter        `json:"filters"`
	Operation RecordOperation `json:"operation"`
	Targets   []Target        `json:"targets"`
}

// RecordAction defines model for Record.Action.
type RecordAction string

// RecordOperation defines model for Record.Operation.
type RecordOperation string

// Rule defines model for Rule.
type Rule struct {
	ContainerId *string  `json:"containerId,omitempty"`
	Verb        RuleVerb `json:"verb"`
}

// RuleVerb defines model for Rule.Verb.
type RuleVerb string

// Target defines model for Target.
type Target struct {
	Keys []string   `json:"keys"`
	Role TargetRole `json:"role"`
}

// TargetRole defines model for Target.Role.
type TargetRole string

// PostAuthJSONBody defines parameters for PostAuth.
type PostAuthJSONBody Bearer

// PostAuthParams defines parameters for PostAuth.
type PostAuthParams struct {
	// Supported operation scope for token
	XNeofsTokenScope *PostAuthParamsXNeofsTokenScope `json:"X-Neofs-Token-Scope,omitempty"`

	// Token lifetime in epoch
	XNeofsTokenLifetime *int `json:"X-Neofs-Token-Lifetime,omitempty"`
}

// PostAuthParamsXNeofsTokenScope defines parameters for PostAuth.
type PostAuthParamsXNeofsTokenScope string

// PutContainersJSONBody defines parameters for PutContainers.
type PutContainersJSONBody struct {
	BasicAcl        *string `json:"basicAcl,omitempty"`
	ContainerName   string  `json:"containerName"`
	PlacementPolicy *string `json:"placementPolicy,omitempty"`
}

// PutContainersParams defines parameters for PutContainers.
type PutContainersParams struct {
	// Base64 encoded signature for bearer token
	XNeofsBearerSignature string `json:"X-Neofs-Bearer-Signature"`

	// Hex encoded the public part of the key that signed the bearer token
	XNeofsBearerOwnerKey string `json:"X-Neofs-Bearer-Owner-Key"`
}

// PutObjectsJSONBody defines parameters for PutObjects.
type PutObjectsJSONBody struct {
	ContainerId string  `json:"containerId"`
	FileName    string  `json:"fileName"`
	Payload     *string `json:"payload,omitempty"`
}

// PutObjectsParams defines parameters for PutObjects.
type PutObjectsParams struct {
	// Base64 encoded signature for bearer token
	XNeofsTokenSignature string `json:"X-Neofs-Token-Signature"`

	// Hex encoded the public part of the key that signed the bearer token
	XNeofsBearerOwnerKey string `json:"X-Neofs-Bearer-Owner-Key"`
}

// PostAuthJSONRequestBody defines body for PostAuth for application/json ContentType.
type PostAuthJSONRequestBody PostAuthJSONBody

// PutContainersJSONRequestBody defines body for PutContainers for application/json ContentType.
type PutContainersJSONRequestBody PutContainersJSONBody

// PutObjectsJSONRequestBody defines body for PutObjects for application/json ContentType.
type PutObjectsJSONRequestBody PutObjectsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Form bearer token to futher requests
	// (POST /auth)
	PostAuth(c *fasthttp.RequestCtx, params PostAuthParams)
	// Create new container in NeoFS
	// (PUT /containers)
	PutContainers(c *fasthttp.RequestCtx, params PutContainersParams)
	// Get container by id
	// (GET /containers/{containerId})
	GetContainersContainerId(c *fasthttp.RequestCtx, containerId string)
	// Upload object to NeoFS
	// (PUT /objects)
	PutObjects(c *fasthttp.RequestCtx, params PutObjectsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(c *fasthttp.RequestCtx, err error)
}

type MiddlewareFunc func(fasthttp.RequestHandler) fasthttp.RequestHandler

// PostAuth operation middleware
func (siw *ServerInterfaceWrapper) PostAuth(c *fasthttp.RequestCtx) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthParams

	headers := &c.Request.Header

	// ------------- Optional header parameter "X-Neofs-Token-Scope" -------------
	if value := headers.Peek(http.CanonicalHeaderKey("X-Neofs-Token-Scope")); len(value) > 0 {
		var XNeofsTokenScope PostAuthParamsXNeofsTokenScope

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Neofs-Token-Scope", runtime.ParamLocationHeader, string(value), &XNeofsTokenScope)
		if err != nil {
			siw.ErrorHandlerFunc(c, &InvalidParamFormatError{ParamName: "X-Neofs-Token-Scope", Err: err})
			return
		}

		params.XNeofsTokenScope = &XNeofsTokenScope

	}

	// ------------- Optional header parameter "X-Neofs-Token-Lifetime" -------------
	if value := headers.Peek(http.CanonicalHeaderKey("X-Neofs-Token-Lifetime")); len(value) > 0 {
		var XNeofsTokenLifetime int

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Neofs-Token-Lifetime", runtime.ParamLocationHeader, string(value), &XNeofsTokenLifetime)
		if err != nil {
			siw.ErrorHandlerFunc(c, &InvalidParamFormatError{ParamName: "X-Neofs-Token-Lifetime", Err: err})
			return
		}

		params.XNeofsTokenLifetime = &XNeofsTokenLifetime

	}

	var handler = func(c *fasthttp.RequestCtx) {
		siw.Handler.PostAuth(c, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(c)
}

// PutContainers operation middleware
func (siw *ServerInterfaceWrapper) PutContainers(c *fasthttp.RequestCtx) {

	var err error

	c.SetUserValue(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutContainersParams

	headers := &c.Request.Header

	// ------------- Required header parameter "X-Neofs-Bearer-Signature" -------------
	if value := headers.Peek(http.CanonicalHeaderKey("X-Neofs-Bearer-Signature")); len(value) > 0 {
		var XNeofsBearerSignature string

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Neofs-Bearer-Signature", runtime.ParamLocationHeader, string(value), &XNeofsBearerSignature)
		if err != nil {
			siw.ErrorHandlerFunc(c, &InvalidParamFormatError{ParamName: "X-Neofs-Bearer-Signature", Err: err})
			return
		}

		params.XNeofsBearerSignature = XNeofsBearerSignature

	} else {
		err := fmt.Errorf("Header parameter X-Neofs-Bearer-Signature is required, but not found")
		siw.ErrorHandlerFunc(c, &RequiredHeaderError{ParamName: "X-Neofs-Bearer-Signature", Err: err})
		return
	}

	// ------------- Required header parameter "X-Neofs-Bearer-Owner-Key" -------------
	if value := headers.Peek(http.CanonicalHeaderKey("X-Neofs-Bearer-Owner-Key")); len(value) > 0 {
		var XNeofsBearerOwnerKey string

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Neofs-Bearer-Owner-Key", runtime.ParamLocationHeader, string(value), &XNeofsBearerOwnerKey)
		if err != nil {
			siw.ErrorHandlerFunc(c, &InvalidParamFormatError{ParamName: "X-Neofs-Bearer-Owner-Key", Err: err})
			return
		}

		params.XNeofsBearerOwnerKey = XNeofsBearerOwnerKey

	} else {
		err := fmt.Errorf("Header parameter X-Neofs-Bearer-Owner-Key is required, but not found")
		siw.ErrorHandlerFunc(c, &RequiredHeaderError{ParamName: "X-Neofs-Bearer-Owner-Key", Err: err})
		return
	}

	var handler = func(c *fasthttp.RequestCtx) {
		siw.Handler.PutContainers(c, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(c)
}

// GetContainersContainerId operation middleware
func (siw *ServerInterfaceWrapper) GetContainersContainerId(c *fasthttp.RequestCtx) {

	var err error

	// ------------- Path parameter "containerId" -------------
	var containerId string

	err = runtime.BindStyledParameter("simple", false, "containerId", urlParam(c, "containerId"), &containerId)
	if err != nil {
		siw.ErrorHandlerFunc(c, &InvalidParamFormatError{ParamName: "containerId", Err: err})
		return
	}

	var handler = func(c *fasthttp.RequestCtx) {
		siw.Handler.GetContainersContainerId(c, containerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(c)
}

// PutObjects operation middleware
func (siw *ServerInterfaceWrapper) PutObjects(c *fasthttp.RequestCtx) {

	var err error

	c.SetUserValue(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutObjectsParams

	headers := &c.Request.Header

	// ------------- Required header parameter "X-Neofs-Token-Signature" -------------
	if value := headers.Peek(http.CanonicalHeaderKey("X-Neofs-Token-Signature")); len(value) > 0 {
		var XNeofsTokenSignature string

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Neofs-Token-Signature", runtime.ParamLocationHeader, string(value), &XNeofsTokenSignature)
		if err != nil {
			siw.ErrorHandlerFunc(c, &InvalidParamFormatError{ParamName: "X-Neofs-Token-Signature", Err: err})
			return
		}

		params.XNeofsTokenSignature = XNeofsTokenSignature

	} else {
		err := fmt.Errorf("Header parameter X-Neofs-Token-Signature is required, but not found")
		siw.ErrorHandlerFunc(c, &RequiredHeaderError{ParamName: "X-Neofs-Token-Signature", Err: err})
		return
	}

	// ------------- Required header parameter "X-Neofs-Bearer-Owner-Key" -------------
	if value := headers.Peek(http.CanonicalHeaderKey("X-Neofs-Bearer-Owner-Key")); len(value) > 0 {
		var XNeofsBearerOwnerKey string

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Neofs-Bearer-Owner-Key", runtime.ParamLocationHeader, string(value), &XNeofsBearerOwnerKey)
		if err != nil {
			siw.ErrorHandlerFunc(c, &InvalidParamFormatError{ParamName: "X-Neofs-Bearer-Owner-Key", Err: err})
			return
		}

		params.XNeofsBearerOwnerKey = XNeofsBearerOwnerKey

	} else {
		err := fmt.Errorf("Header parameter X-Neofs-Bearer-Owner-Key is required, but not found")
		siw.ErrorHandlerFunc(c, &RequiredHeaderError{ParamName: "X-Neofs-Bearer-Owner-Key", Err: err})
		return
	}

	var handler = func(c *fasthttp.RequestCtx) {
		siw.Handler.PutObjects(c, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(c)
}

func urlParam(c *fasthttp.RequestCtx, name string) string {
	param, _ := c.UserValue(name).(string)
	return param
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates fasthttp.RequestHandler with routing matching OpenAPI spec.
func Handler(si ServerInterface) fasthttp.RequestHandler {
	return HandlerWithOptions(si, FastHTTPServerOptions{})
}

type FastHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *router.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(c *fasthttp.RequestCtx, err error)
}

// HandlerFromMux creates fasthttp.RequestHandler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *router.Router) fasthttp.RequestHandler {
	return HandlerWithOptions(si, FastHTTPServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *router.Router, baseURL string) fasthttp.RequestHandler {
	return HandlerWithOptions(si, FastHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates fasthttp.RequestHandler with additional options
func HandlerWithOptions(si ServerInterface, options FastHTTPServerOptions) fasthttp.RequestHandler {
	r := options.BaseRouter

	if r == nil {
		r = router.New()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(c *fasthttp.RequestCtx, err error) {
			c.Error(err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	gr := r.Group(options.BaseURL)

	gr.POST("/auth", wrapper.PostAuth)

	gr.PUT("/containers", wrapper.PutContainers)

	gr.GET("/containers/{containerId}", wrapper.GetContainersContainerId)

	gr.PUT("/objects", wrapper.PutObjects)

	return r.Handler
}
